{
  rules: [
    {
      files: ["pyproject.toml"],
      JMESPathsMatch: [
        // Use tuples for pytest parametrizations values
        ['tool.flakeheaven."pytest-parametrize-values-type"', "tuple"],

        // Don't need parentheses in fixtures decorators without kwargs,
        // see: https://github.com/m-burst/flake8-pytest-style/blob/master/docs/rules/PT001.md
        ['tool.flakeheaven."pytest-fixture-no-parentheses"', true],

        // Enable all flake8 plugins and rules, disabling
        // after it some rules for each plugin, if needed

        // pycodestyle
        ["type(tool.flakeheaven.plugins.pycodestyle)", "array"],
        ["tool.flakeheaven.plugins.pycodestyle[0]", "+*"],
        //   Binary operators after line breaks because are more readable
        //   when there are a lot of them in a condicitional
        ["contains(tool.flakeheaven.plugins.pycodestyle, '-W503')", true],

        // pyflakes
        ["contains(keys(tool.flakeheaven.plugins), 'pyflakes')", true],
        ["tool.flakeheaven.plugins.pyflakes[0]", "+*"],

        // pylint
        ["contains(keys(tool.flakeheaven.plugins), 'pylint')", true],
        ["tool.flakeheaven.plugins.pylint[0]", "+*"],

        // flake8-builtins
        ["contains(keys(tool.flakeheaven.plugins), 'flake8-builtins')", true],
        ['tool.flakeheaven.plugins."flake8-builtins"[0]', "+*"],

        // flake8-comprehensions
        [
          "contains(keys(tool.flakeheaven.plugins), 'flake8-comprehensions')",
          true,
        ],
        ['tool.flakeheaven.plugins."flake8-comprehensions"[0]', "+*"],

        // flake8-docstrings
        ["contains(keys(tool.flakeheaven.plugins), 'flake8-docstrings')", true],
        ['tool.flakeheaven.plugins."flake8-docstrings"[0]', "+*"],
        //   Allow `__init__` method without doctrings. Class constructors must
        //     be documented in class docstrings. Is really overkill to add docstrings
        //     in ``__init__`` to tiny classes like exceptions.
        [
          "contains(tool.flakeheaven.plugins.\"flake8-docstrings\", '-D107')",
          true,
        ],
        //   Allow magic methods without docstrings. Magic methods must be self explicative
        //   in their context.
        [
          "contains(tool.flakeheaven.plugins.\"flake8-docstrings\", '-D105')",
          true,
        ],

        // flake8-executable
        ["contains(keys(tool.flakeheaven.plugins), 'flake8-executable')", true],
        ['tool.flakeheaven.plugins."flake8-executable"[0]', "+*"],

        // flake8-implicit-str-concat
        [
          "contains(keys(tool.flakeheaven.plugins), 'flake8-implicit-str-concat')",
          true,
        ],
        ['tool.flakeheaven.plugins."flake8-implicit-str-concat"[0]', "+*"],

        // flake8-print
        ["contains(keys(tool.flakeheaven.plugins), 'flake8-print')", true],
        ['tool.flakeheaven.plugins."flake8-print"[0]', "+*"],

        // flake8-printf-formatting
        [
          "contains(keys(tool.flakeheaven.plugins), 'flake8-printf-formatting')",
          true,
        ],
        ['tool.flakeheaven.plugins."flake8-printf-formatting"[0]', "+*"],

        // flake8-pytest-style
        [
          "contains(keys(tool.flakeheaven.plugins), 'flake8-pytest-style')",
          true,
        ],
        ['tool.flakeheaven.plugins."flake8-pytest-style"[0]', "+*"],

        // --- Exceptions to rules ---
        ["contains(keys(tool.flakeheaven.exceptions), 'tests/**')", true],

        // flake8-docstrings
        [
          "contains(keys(tool.flakeheaven.exceptions.\"tests/**\"), 'flake8-docstrings')",
          true,
        ],
        //   No docstrings needed in tests
        [
          "op(tool.flakeheaven.exceptions.\"tests/**\".\"flake8-docstrings\", '==', ['-D100', '-D101', '-D102', '-D103', '-D104', '-D107', '-D205', '-D415'])",
          true,
        ],
      ],
    },
  ],
}
