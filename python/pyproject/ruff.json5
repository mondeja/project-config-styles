{
  rules: [
    {
      files: [".gitignore"],
      includeLines: [".ruff_cache/"],
    },
    {
      files: ["pyproject.toml"],
      hint: 'tool.ruff."target-version" must be set to py3X where X is the minor version of the minimum supported Python version by the project defined at project."requires-python"',
      JMESPathsMatch: [
        [
          "op(op('py', '+', replace(split(project.\"requires-python\", '=')[1], '.', '')), '==', tool.ruff.\"target-version\")",
          true,
        ],
      ],
    },
    {
      files: ["pyproject.toml"],
      JMESPathsMatch: [
        // Main ruff configuration
        //   Maximum line length
        ['tool.ruff."line-length"', 80],
        //   Use single or double quotes for strings
        [
          'op(tool.ruff."flake8-quotes"."inline-quotes" == \'single\', \'|\', tool.ruff."flake8-quotes"."inline-quotes" == \'double\')',
          true,
        ],

        // flake8-pytest-style configuration
        ['tool.ruff."flake8-pytest-style"."parametrize-values-type"', "tuple"],
        [
          'tool.ruff."flake8-pytest-style"."parametrize-values-row-type"',
          "tuple",
        ],
        ['tool.ruff."flake8-pytest-style"."fixture-parentheses"', false],

        // pydocstyle configuration
        //   use Google docstrings
        ['tool.ruff."pydocstyle"."convention"', "google"],

        // isort configuration
        ['tool.ruff.isort."lines-after-imports"', 2],
        ['tool.ruff.isort."combine-as-imports"', true],
        ['tool.ruff.isort."force-wrap-aliases"', true],
        ['type(tool.ruff.isort."known-local-folder")', "array"],
        ["contains(tool.ruff.isort.\"known-local-folder\", 'tests')", true],

        // Enable a lot of ruff rules, disabling some per file after that
        ["contains(tool.ruff.select, 'W')", true],
        ["contains(tool.ruff.select, 'B')", true],
        ["contains(tool.ruff.select, 'E')", true],
        ["contains(tool.ruff.select, 'I')", true],
        ["contains(tool.ruff.select, 'F')", true],
        ["contains(tool.ruff.select, 'A')", true],
        ["contains(tool.ruff.select, 'D')", true],
        ["contains(tool.ruff.select, 'G')", true],
        ["contains(tool.ruff.select, 'Q')", true],
        ["contains(tool.ruff.select, 'PL')", true],
        ["contains(tool.ruff.select, 'UP')", true],
        ["contains(tool.ruff.select, 'PT')", true],
        ["contains(tool.ruff.select, 'C4')", true],
        ["contains(tool.ruff.select, 'EXE')", true],
        ["contains(tool.ruff.select, 'ISC')", true],
        ["contains(tool.ruff.select, 'T20')", true],
        ["contains(tool.ruff.select, 'INP')", true],
        ["contains(tool.ruff.select, 'ARG')", true],
        ["contains(tool.ruff.select, 'SIM')", true],
        ["contains(tool.ruff.select, 'RET')", true],
        ["contains(tool.ruff.select, 'FBT')", true],
        ["contains(tool.ruff.select, 'ERA')", true],
        ["contains(tool.ruff.select, 'T10')", true],
        ["contains(tool.ruff.select, 'COM')", true],
        ["contains(tool.ruff.select, 'SLOT')", true],

        ["contains(keys(tool.ruff.\"per-file-ignores\"), 'tests/**')", true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D100\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D101\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D102\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D103\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D104\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D107\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D205\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'D415\')', true],
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'INP001\')', true],
        [
          'contains(tool.ruff."per-file-ignores"."tests/**", \'PLR0913\')',
          true,
        ],
        [
          'contains(tool.ruff."per-file-ignores"."tests/**", \'PLR2004\')',
          true,
        ],
      ],
    },

    {
      // if mypy is configured, add type annotations with isort plugin of ruff
      files: ["pyproject.toml"],
      ifJMESPathsMatch: {
        "pyproject.toml": [["contains(keys(tool), 'mypy')", true]],
      },
      JMESPathsMatch: [
        ['type(tool.ruff.isort."required-imports")', "array"],
        [
          "contains(tool.ruff.isort.\"required-imports\", 'from __future__ import annotations')",
          true,
        ],
        //   not for tests
        ['contains(tool.ruff."per-file-ignores"."tests/**", \'I002\')', true],
      ],
    },

    // TODO: in the future, ruff should be able to autoformat the code
    // See https://github.com/astral-sh/ruff/issues/1904

    {
      // if pyproject.toml is specifying double quotes for ruff,
      // the formatting must be black
      files: ["pyproject.toml"],
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ['tool.ruff."flake8-quotes"."inline-quotes"', "double"],
        ],
      },
      JMESPathsMatch: [
        ["contains(keys(tool), 'black')", true],
        ["contains(keys(tool.black), 'line-length')", true],
        ['tool.black."line-length"', 80],

        // whitespaces before ':' are not PEP-8 compliant, see:
        // https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#slices
        ["contains(tool.ruff, 'ignore')", true],
        ["contains(tool.ruff.ignore, 'E203')", true],
      ],
    },
    {
      files: ["pyproject.toml"],
      hint: 'tool.black."target-version" must be set to py3X where X is the minor version of the minimum supported Python version by the project defined at project."requires-python"',
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ['tool.ruff."flake8-quotes"."inline-quotes"', "double"],
        ],
      },
      JMESPathsMatch: [
        [
          "op(op('py', '+', replace(split(project.\"requires-python\", '=')[1], '.', '')), '==', tool.black.\"target-version\")",
          true,
        ],
      ],
    },
    {
      files: [".pre-commit-config.yaml"],
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ['tool.ruff."flake8-quotes"."inline-quotes"', "double"],
        ],
      },
      JMESPathsMatch: [
        ["length(repos[?repo=='https://github.com/psf/black'])", 1],
        [
          "regex_match('^\\d+\\.\\d+\\.\\d+$', repos[?repo=='https://github.com/psf/black'] | [0].rev)",
          true,
        ],
        [
          "repos[?repo=='https://github.com/psf/black'] | [0].hooks[0].id",
          "black",
        ],
      ],
    },
    {
      // if pyproject.toml is specifying single quotes for ruff,
      // the formatting must be autopep8
      files: [".pre-commit-config.yaml"],
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ['tool.ruff."flake8-quotes"."inline-quotes"', "single"],
        ],
      },
      JMESPathsMatch: [
        [
          "length(repos[?repo=='https://github.com/pre-commit/mirrors-autopep8'])",
          1,
        ],
        [
          "repos[?repo=='https://github.com/pre-commit/mirrors-autopep8'] | [0].hooks[0].id",
          "autopep8",
        ],
      ],
    },
  ],
}
