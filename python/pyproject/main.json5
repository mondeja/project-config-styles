{
  rules: [
    {
      files: ["pyproject.toml"],
      crossJMESPathsMatch: [
        ["null", ["pyproject.toml?text", "[0]"], "[1]", "[tool.poetry]"],
      ],
      JMESPathsMatch: [
        // specify poetry as the build system
        // ```toml
        // [build-system]
        // requires = ["poetry-core>=1.1.0b2"]
        // build-backend = "poetry.core.masonry.api"
        // ```
        ['type("build-system")', "object"],
        ['type("build-system".requires)', "array"],
        ['"build-system".requires[0]', "poetry-core>=1.1.0b2"],
        ['"build-system"."build-backend"', "poetry.core.masonry.api"],

        // 'tool' object must exist
        ["contains(keys(@), 'tool')", true],

        // poetry metadata
        //   'poetry' object must exist inside 'tool'
        ["contains(keys(tool), 'poetry')", true],
        /**
         *  name
         *
         * Must be a valid regex for a project, the same that the project
         *   root directory name.
         **/
        ["contains(keys(tool.poetry), 'name')", true],
        ["type(tool.poetry.name)", "string"],
        ["regex_match('[a-z0-9-]+$', tool.poetry.name)", true],
        ["op(tool.poetry.name, '==', rootdir_name())", true],
        //   version
        ["contains(keys(tool.poetry), 'version')", true],
        ["type(tool.poetry.version)", "string"],
        ["regex_match('^\\d+\\.\\d+\\.\\d+$', tool.poetry.version)", true],
        //   description
        ["contains(keys(tool.poetry), 'description')", true],
        ["type(tool.poetry.description)", "string"],
        //     must end in point
        ["regex_match('.+\\.$', tool.poetry.description)", true],
        //   readme
        ["contains(keys(tool.poetry), 'readme')", true],
        ["tool.poetry.readme", "README.md"],
        //   license
        ["contains(keys(tool.poetry), 'license')", true],
        ["type(tool.poetry.license)", "string"],
        //   authors
        //     TODO: regular expression for authors
        ["contains(keys(tool.poetry), 'authors')", true],
        ["type(tool.poetry.authors)", "array"],
        ["op(length(tool.poetry.authors), '>', `0`)", true],
        //   repository
        ["contains(keys(tool.poetry), 'repository')", true],
        ["type(tool.poetry.repository)", "string"],
        ["regex_match('^https://', tool.poetry.repository)", true],
        //   documentation
        ["contains(keys(tool.poetry), 'documentation')", true],
        ["type(tool.poetry.documentation)", "string"],
        ["regex_match('^https://', tool.poetry.documentation)", true],

        /**
         * classifiers
         *
         * `tool.poetry.classifiers` must:        https://pypi.org/classifiers/
         *   - contain:
         *     - One of the next classifiers:
         *       - "Development Status :: 2 - Pre-Alpha"
         *       - "Development Status :: 3 - Alpha"
         *       - "Development Status :: 4 - Beta"
         *       - "Development Status :: 5 - Production/Stable"
         *       - "Development Status :: 6 - Mature"
         *     - A classifier starting with "Operating System :: "
         *     - A classifier starting with "Topic :: "
         *     - A classifier starting with "Intended Audience :: "
         *   - not contain:
         *     - A classifier starting with "License" because
         *       poetry adds it based on the `license` field when building.
         *       See `dist/*.tar.gz/PKG-INFO`.
         *     - A classifier starting with "Programming Language :: Python ::"
         *       poetry adds it based on the version defined in
         *       `tool.poetry.dependencies.python`.
         * TODO: if `tool.poetry.scripts` has items, add 'Environment:: Console'
         *   classifier
         **/
        ["contains(keys(tool.poetry), 'classifiers')", true],
        ["op(length(tool.poetry.classifiers), '>=', `4`)", true],
        [
          'contains(`["Development Status :: 2 - Pre-Alpha", "Development Status :: 3 - Alpha", "Development Status :: 4 - Beta", "Development Status :: 5 - Production/Stable", "Development Status :: 6 - Mature"]`, tool.poetry.classifiers[0])',
          true,
        ],
        [
          "regex_match('^Operating System :: ', tool.poetry.classifiers[1])",
          true,
        ],
        [
          "regex_match('^Intended Audience :: ', tool.poetry.classifiers[2])",
          true,
        ],
        ["regex_match('^Topic :: ', tool.poetry.classifiers[3])", true],
        [
          "tool.poetry.classifiers | length([?regex_match('^[Ll]icense', @)])",
          0,
        ],
        [
          "tool.poetry.classifiers | length([?regex_match('^Programming Language :: Python', @)])",
          0,
        ],

        /**
         * urls
         *
         * - Must not allow "Documentation", "Docs", "Repository",
         *   "Repo" or other variants, these must be moved to
         *   `tool.poetry.documentation` and `tool.poetry.repository`.
         * - A "Bug tracker"  url pointing to GH issues is mandatory.
         * - A "Changelog" url pointing to GH releases is mandatory.
         **/
        ["type(tool.poetry.urls)", "object"],
        ['type(tool.poetry.urls."Bug tracker")', "string"],
        [
          "regex_match('https://github\\.com/[a-z0-9-]+/[a-z0-9-]+/issues', tool.poetry.urls.\"Bug tracker\")",
          true,
        ],
        ["type(tool.poetry.urls.Changelog)", "string"],
        [
          "regex_match('https://github\\.com/[a-z0-9-]+/[a-z0-9-]+/releases', tool.poetry.urls.Changelog)",
          true,
        ],
        [
          "length(op(keys(tool.poetry.urls), '&', ['Documentation', 'documentation', 'Docs', 'docs', 'Doc', 'doc', 'Repository', 'repository', 'Repo', 'repo']))",
          0,
        ],

        //   dependencies
        /**
         * - Forbid the definition of a dependencies group
         *   named `docs`, must be named `doc` instead.
         *   The same applies to the testing one: `tests`
         *   must be renamed by `test`.
         * - The development dependencies group (`dev`) is
         *   mandatory.
         **/
        ["contains(keys(tool.poetry), 'dependencies')", true],
        //     specify python version
        ["contains(keys(tool.poetry.dependencies), 'python')", true],
        //   dependencies groups
        ["contains(keys(tool.poetry), 'group')", true],
        ["contains(keys(tool.poetry.group), 'dev')", true],
        ["contains(keys(tool.poetry.group.dev), 'dependencies')", true],
        ["contains(keys(tool.poetry.group), 'docs')", false],
        ["contains(keys(tool.poetry.group), 'tests')", false],

        // packages
        ["type(tool.poetry.packages)", "array"],
        ["op(length(tool.poetry.packages), '>', `0`)", true],
        ["tool.poetry.packages[0].from", "src"],

        // bump version tool
        //   'mondeja-bump' must be a development dependency
        [
          "contains(keys(tool.poetry.group.dev.dependencies), 'mondeja-bump')",
          true,
        ],
        //   whatever version, we don't care
        ['tool.poetry.group.dev.dependencies."mondeja-bump"', "*"],

        /**
         * poetry-exec-plugin
         *
         * A linting command must be added to
         * `tool.poetry-exec-plugin.commands` named `lint` that
         * will execute pre-commit.
         **/
        ["contains(keys(tool), 'poetry-exec-plugin')", true],
        ["contains(keys(tool.\"poetry-exec-plugin\"), 'commands')", true],
        ['tool."poetry-exec-plugin".commands.lint', "pre-commit run -a"],
      ],
    },
    {
      /**
       * If tool.poetry.scripts contains properties (means that the package
       * have CLI scripts), dependencies must include
       * `importlib-metadata-argparse-version` as a dependency.
       *
       * Rationale: using a CLI utility, which must declare a version in
       *   the CLI, wich must be lazily evaluated (see the library for a
       *   detailed explanation).
       **/
      files: ["pyproject.toml"],
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ["op(length(keys(tool.poetry.scripts)), '>', `0`)", true],
        ],
      },
      JMESPathsMatch: [
        [
          "contains(keys(tool.poetry.dependencies), 'importlib-metadata-argparse-version')",
          true,
        ],
      ],
    },
    {
      files: ["pyproject.toml"],
      hint: "'tool.poetry.license' must be a valid OSI approved SPDX license",
      crossJMESPathsMatch: [
        /**
         * license
         *
         *   - Must be a valid OSI approved SPDX license identifier.
         **/
        [
          "tool.poetry.license",
          [
            "gh://spdx/license-list-data@v3.17/json/licenses.json",
            "licenses[?isOsiApproved] | [?!isDeprecatedLicenseId].licenseId",
          ],
          "contains([1], [0])",
          true,
        ],
      ],
    },
  ],
}
