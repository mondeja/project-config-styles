{
  rules: [
    {
      files: ["pyproject.toml"],
      hint: "Don't use Poetry, use Hatch instead",
      ifJMESPathsMatch: { "pyproject.toml": [["type(tool)", "object"]] },
      JMESPathsMatch: [["contains(keys(tool), 'poetry')", false]],
    },
    {
      files: ["pyproject.toml"],
      crossJMESPathsMatch: [
        ["null", ["pyproject.toml?text", "[0]"], "[1]", "[project]"],
      ],
      JMESPathsMatch: [
        /**
         * Define hatchling as the build system:
         *
         * ```toml
         * [build-system]
         * requires = ["hatchling"]
         * build-backend = "hatchling.build"
         * ```
         **/
        ['type("build-system")', "object"],
        ['type("build-system".requires)', "array"],
        ['"build-system".requires[0]', "hatchling"],
        ['"build-system"."build-backend"', "hatchling.build"],

        /**
         * Building table for the project:
         *
         * ```toml
         * [tool.hatch.build]
         * include = ["/src"]
         * ```
         **/
        ["contains(keys(tool), 'hatch')", true],
        ["contains(keys(tool.hatch), 'build')", true],
        ["contains(keys(tool.hatch.build), 'include')", true],
        ["type(tool.hatch.build.include)", "array"],
        ["tool.hatch.build.include[0]", "/src"],
        /**
         * ```toml
         * [tool.hatch.build.targets.wheel]
         * packages = ["src/<package_name>"]
         **/
        ["contains(keys(tool.hatch.build.targets), 'wheel')", true],
        ["type(tool.hatch.build.targets.wheel.packages)", "array"],
        ["op(length(tool.hatch.build.targets.wheel.packages), '>', `0`)", true],

        // PEP 621 metadata
        /**
         *  name
         *
         * Must be a valid regex for a project, the same that the project
         *   root directory name.
         *
         *   NOTE: this is indirectly ensuring that the root directory
         *         name is valid against a regular expression.
         **/
        ["contains(keys(project), 'name')", true],
        ["type(project.name)", "string"],
        ["regex_match('[a-z0-9-]+$', project.name)", true],
        ["op(project.name, '==', rootdir_name())", true],
        //   version
        ["contains(keys(project), 'version')", true],
        ["type(project.version)", "string"],
        ["regex_match('^\\d+\\.\\d+\\.\\d+$', project.version)", true],
        //   description
        ["contains(keys(project), 'description')", true],
        ["type(project.description)", "string"],
        //   readme
        ["project.readme", "README.md"],
        //   license
        ["contains(keys(project), 'license')", true],
        ["type(project.license)", "string"],
        //   authors
        ["contains(keys(project), 'authors')", true],
        ["type(project.authors)", "array"],
        ["op(length(project.authors), '>', `0`)", true],
        //   keywords
        ["contains(keys(project), 'keywords')", true],
        ["type(project.keywords)", "array"],
        ["op(length(project.keywords), '>', `0`)", true],
        //   requires-python
        ["contains(keys(project), 'requires-python')", true],
        ['type(project."requires-python")', "string"],

        /**
         * classifiers
         *
         * `project.classifiers` must:        https://pypi.org/classifiers/
         *   - contain:
         *     - One of the next classifiers:
         *       - "Development Status :: 2 - Pre-Alpha"
         *       - "Development Status :: 3 - Alpha"
         *       - "Development Status :: 4 - Beta"
         *       - "Development Status :: 5 - Production/Stable"
         *       - "Development Status :: 6 - Mature"
         *     - A classifier starting with "Operating System :: "
         *     - A classifier starting with "Topic :: "
         *     - A classifier starting with "Intended Audience :: "
         *     - A classifier starting with "License :: OSI Approved ::"
         **/
        ["contains(keys(project), 'classifiers')", true],
        ["op(length(project.classifiers), '>=', `4`)", true],
        [
          'contains(`["Development Status :: 2 - Pre-Alpha", "Development Status :: 3 - Alpha", "Development Status :: 4 - Beta", "Development Status :: 5 - Production/Stable", "Development Status :: 6 - Mature"]`, project.classifiers[0])',
          true,
        ],
        ["regex_match('^Operating System :: ', project.classifiers[1])", true],
        [
          "regex_match('^License :: OSI Approved ::', project.classifiers[2])",
          true,
        ],
        ["regex_match('^Intended Audience :: ', project.classifiers[3])", true],
        ["regex_match('^Topic :: ', project.classifiers[4])", true],

        /**
         * urls
         *
         * - A "Source" url pointing to a Github repository.
         * - A "Bug tracker"  url pointing to Github issues is mandatory.
         * - A "Changelog" url pointing to Github releases is mandatory.
         **/
        ["type(project.urls)", "object"],
        ['type(project.urls."Source")', "string"],
        [
          "regex_match('https://github\\.com/[a-z0-9-]+/[a-z0-9-]+', project.urls.\"Source\")",
          true,
        ],
        ['type(project.urls."Bug tracker")', "string"],
        [
          "regex_match('https://github\\.com/[a-z0-9-]+/[a-z0-9-]+/issues', project.urls.\"Bug tracker\")",
          true,
        ],
        ["type(project.urls.Changelog)", "string"],
        [
          "regex_match('https://github\\.com/[a-z0-9-]+/[a-z0-9-]+/releases', project.urls.Changelog)",
          true,
        ],
        [
          "length(op(keys(project.urls), '&', ['documentation', 'Docs', 'docs', 'Doc', 'doc', 'Repository', 'repository', 'Repo', 'repo', 'changelog', 'Bug Tracker', 'bug tracker', 'Issues', 'issues']))",
          0,
        ],

        /**
         * Environments
         **/
        ["type(tool.hatch.envs)", "object"],

        // default
        ["type(tool.hatch.envs.default)", "object"],
        ["type(tool.hatch.envs.default.python)", "string"],
        ["regex_match('\\d+\\.\\d+$', tool.hatch.envs.default.python)", true],

        // style
        ["type(tool.hatch.envs.style)", "object"],
        ["type(tool.hatch.envs.style.python)", "string"],
        ["regex_match('\\d+\\.\\d+$', tool.hatch.envs.style.python)", true],
        ["type(tool.hatch.envs.style.scripts)", "object"],
        ["tool.hatch.envs.style.scripts.lint", "pre-commit run -a"],
      ],
    },
    {
      /**
       * If project.scripts contains properties (means that the package
       * have CLI scripts), dependencies must include
       * `importlib-metadata-argparse-version` as a dependency.
       *
       * Rationale: using a CLI utility, which must declare a version in
       *   the CLI, wich must be lazily evaluated (see the library for a
       *   detailed explanation).
       *
       * Also, the classifiers must contain "Environment :: Console"
       **/
      files: ["pyproject.toml"],
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ["op(length(keys(project.scripts || `{}`)), '>', `0`)", true],
        ],
      },
      JMESPathsMatch: [
        ["type(project.dependencies)", "array"],
        [
          "contains(project.dependencies, 'importlib-metadata-argparse-version')",
          true,
        ],
        ["contains(project.classifiers, 'Environment :: Console')", true],
      ],
    },
    {
      /**
       * license
       *
       *   - Must be a valid OSI approved SPDX license identifier.
       **/
      files: ["pyproject.toml"],
      hint: "'project.license' must be a valid OSI approved SPDX license",
      ifJMESPathsMatch: {
        "pyproject.toml": [["type(project.license)", "string"]],
      },
      crossJMESPathsMatch: [
        [
          "project.license",
          [
            "gh://spdx/license-list-data@v3.17/json/licenses.json",
            "licenses[?isOsiApproved] | [?!isDeprecatedLicenseId].licenseId",
          ],
          "contains([1], [0])",
          true,
        ],
      ],
    },

    /**
     * project.requires-python
     **/
    {
      files: ["pyproject.toml"],
      hint: "Explicitly declare the maximum Python version supported with the '<' operator",
      JMESPathsMatch: [["contains(project.\"requires-python\", '<')", true]],
    },
    {
      files: ["pyproject.toml"],
      hint: "Explicitly declare the minimum Python version supported with the '>=' operator",
      JMESPathsMatch: [["contains(project.\"requires-python\", '>=')", true]],
    },
  ],
}
