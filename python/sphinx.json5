{
  extends: [
    "gitignore/sphinx.json5",
    "pyproject/docs-gh-pages.json5",
    ".github/workflows/deploy-docs.json5",
  ],
  rules: [
    {
      files: [
        "docs/",
        "docs/conf.py",
        "docs/Makefile",
        "docs/make.bat",
        "docs/index.rst",
      ],
    },
    {
      files: {
        not: {
          "doc/": "Rename the documentation 'doc/' folder to 'docs/'.",
          "docs/index.md": "The documentation, when using Sphinx, must be in RestructuredText format, if you want to write it with Markdown use Mkdocs instead. Rename 'docs/index.md' by 'docs/index.rst'.",
          "mkdocs.yml": "Don't mix Sphinx with Mkdocs. Remove the mkdocs.yml file.",
        },
      },
    },
    {
      files: ["pyproject.toml"],
      hint: "Remove 'docs' or 'documentation' scripts from default environment",
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ["contains(keys(tool.hatch.envs.default), 'scripts')", true],
        ],
      },
      JMESPathsMatch: [
        ["contains(keys(tool.hatch.envs.default.scripts), 'doc')", false],
        ["contains(keys(tool.hatch.envs.default.scripts), 'doc:show')", false],
        ["contains(keys(tool.hatch.envs.default.scripts), 'doc:serve')", false],
        ["contains(keys(tool.hatch.envs.default.scripts), 'docs')", false],
        ["contains(keys(tool.hatch.envs.default.scripts), 'docs:show')", false],
        [
          "contains(keys(tool.hatch.envs.default.scripts), 'docs:serve')",
          false,
        ],
        [
          "contains(keys(tool.hatch.envs.default.scripts), 'documentation')",
          false,
        ],
        [
          "contains(keys(tool.hatch.envs.default.scripts), 'documentation:show')",
          false,
        ],
        [
          "contains(keys(tool.hatch.envs.default.scripts), 'documentation:serve')",
          false,
        ],
      ],
    },
    {
      files: ["pyproject.toml"],
      hint: "Define the docs environment",
      JMESPathsMatch: [["contains(keys(tool.hatch.envs), 'docs')", true]],
    },
    {
      files: ["pyproject.toml"],
      hint: "Add documentation scripts to the docs environment",
      JMESPathsMatch: [
        ["contains(keys(tool.hatch.envs.docs), 'scripts')", true],
        [
          "tool.hatch.envs.docs.scripts.build",
          "python -m sphinx -n -T -E -W docs docs/_build/html",
        ],
        [
          "tool.hatch.envs.docs.scripts.serve",
          "python -m sphinx -n -T -E -W docs docs/_build/html &&\npython -c 'import webbrowser as w;w.open(\"http://127.0.0.1:8089\")' &&\npython -m http.server 8089 -b localhost -d docs/_build/html",
        ],
      ],
    },
    {
      files: ["pyproject.toml"],
      hint: "Add Sphinx documentation dependency to the docs environment pinning major version only",
      JMESPathsMatch: [
        ["type(tool.hatch.envs.docs.dependencies)", "array"],
        [
          "regex_match('Sphinx~=\\d+\\.\\d+$', tool.hatch.envs.docs.dependencies[0])",
          true,
        ],
      ],
    },
    {
      files: ["pyproject.toml"],
      JMESPathsMatch: [
        // Flake8 exceptions in documentation pages (flakeheaven lints code blocks there)
        [
          'type(tool.flakeheaven.exceptions."docs/**"."flake8-docstrings")',
          "array",
        ],
        [
          // Allow modules without docstrings as are just examples
          // Allow public classes without docstrings as are just examples
          // Allow public methods without docstrings as are just examples
          "op(tool.flakeheaven.exceptions.\"docs/**\".\"flake8-docstrings\", '>=', ['-D100', '-D101', '-D102'])",
          true,
        ],

        [
          "contains(keys(tool.flakeheaven.exceptions.\"docs/**\"), 'flake8-print')",
          true,
        ],
        [
          // Allow the usage `print` in documentation blocks because is more readable
          // than `sys.stdout.write` for the user
          'contains(tool.flakeheaven.exceptions."docs/**"."flake8-print", \'-T201\')',
          true,
        ],

        [
          // Allow implicit namespace packages in RestructuredText files
          //
          // That does not have much sense in examples as are snippets of
          // code, nor files, but flakeheaven pass them to the plugin.
          "contains(keys(tool.flakeheaven.exceptions.\"docs/**\"), 'flake8-no-pep420')",
          true,
        ],
        [
          'contains(tool.flakeheaven.exceptions."docs/**"."flake8-no-pep420", \'-INP001\')',
          true,
        ],
      ],
    },
    {
      files: [".editorconfig"],
      JMESPathsMatch: [
        // With documentation, the project will include CSS files, so
        // configure them properly with .editorconfig
        ["contains(keys(@), '*.css')", true],
        ["contains(keys(\"*.css\"), 'indent_size')", true],
        ['"*.css".indent_size', 2],
      ],
    },
    {
      /**
       * With documentation, Sphinx creates a .bat file with crlf line
       * endings that will not pass '.editorconfig' checks.
       *
       * We can't define a '*.bat' section in .editorconfig with
       * 'end_of_line = crlf' because when GIT does checkouts, the
       * end of line characters are replaced with lf.
       *
       * The next configuration in .gitattributes forces that when GIT
       * does checkouts, the '.bat' files line ends are normalized to lf.
       * Keep in mind that this will only take effect at checkout,
       * but when the file is created with `sphinx-quickstart` the
       * original crlf line endings are still there, even in Linux.
       *
       * This problem is solved with a pre-commit hook (see below).
       **/
      files: [".gitattributes"],
      includeLines: ["*.bat text eol=lf"],
    },
    {
      files: [".pre-commit-config.yaml"],
      JMESPathsMatch: [
        // Configure prettier to format CSS files
        [
          "repos[?repo=='https://github.com/pre-commit/mirrors-prettier'] | [0].hooks[0].id",
          "prettier",
        ],
        [
          "contains(repos[?repo=='https://github.com/pre-commit/mirrors-prettier'] | [0].hooks[0].types_or, 'css')",
          true,
        ],

        // BAT files must have lf line endings
        [
          "contains(repos[?repo=='https://github.com/Lucas-C/pre-commit-hooks'] | [0].hooks[*].id, 'remove-crlf')",
          true,
        ],
        [
          "regex_match('^v\\d+\\.\\d+\\.\\d+$', repos[?repo=='https://github.com/Lucas-C/pre-commit-hooks'] | [0].rev)",
          true,
        ],
        [
          "repos[?repo=='https://github.com/Lucas-C/pre-commit-hooks'] | [0].hooks[?id=='remove-crlf'] | [0].files",
          "\\.bat$",
        ],
        [
          "repos[?repo=='https://github.com/Lucas-C/pre-commit-hooks'] | [0].hooks[?id=='remove-crlf'] | [0].name",
          "*.bat end of lines",
        ],
      ],
    },

    {
      files: ["docs/conf.py"],
      JMESPathsMatch: [
        // Check the metadata required by Sphinx
        ["type(project)", "string"],
        ["type(author)", "string"],
        ["type(project_copyright)", "string"],
        ["regex_match('^\\d+\\-?\\d*, .+$', project_copyright)", true],

        ["type(release)", "string"],
        ["type(version)", "string"],
        ["regex_match('^\\d+\\.\\d+\\.\\d+$', release)", true],
        ["regex_match('^\\d+\\.\\d+$', version)", true],

        // Check other config fields required by Sphinx
        //   templates_path
        ["type(templates_path)", "array"],
        ["length(templates_path)", 1],
        ["templates_path[0]", "_templates"],
        //   exclude_patterns
        ["type(exclude_patterns)", "array"],
        ["contains(exclude_patterns, '_build')", true],
        ["contains(exclude_patterns, 'Thumbs.db')", true],
        ["contains(exclude_patterns, '.DS_Store')", true],
        //   html_theme
        ["contains(keys(@), 'html_theme')", true],
        //   html_static_path
        ["contains(keys(@), 'html_static_path')", true],
        ["type(html_static_path)", "array"],
        ["length(html_static_path)", 1],
        ["html_static_path[0]", "_static"],
      ],
    },

    {
      ifJMESPathsMatch: {
        "pyproject.toml": [
          ['tool.flakeheaven."docstring-convention"', "google"],
        ],
      },
      files: ["docs/conf.py"],
      JMESPathsMatch: [["contains(extensions, 'sphinx.ext.napoleon')", true]],
      hint: "When using Google docstrings convention, the extension 'sphinx.ext.napoleon' must be added to 'extensions'",
    },

    // docs/conf.py metadata must match with pyproject.toml metadata
    {
      files: ["docs/conf.py"],
      hint: "pyproject.toml[project.name] must be equal to docs/conf.py::project",
      crossJMESPathsMatch: [
        [
          "project",
          ["pyproject.toml", "project.name"],
          "op([0], '==', [1])",
          true,
        ],
      ],
    },
    {
      files: ["docs/conf.py"],
      hint: "The minor version at pyproject.toml[project.name] must be equal to docs/conf.py::version",
      crossJMESPathsMatch: [
        [
          "version",
          ["pyproject.toml", "join('.', split(project.version, '.')[0:2])"],
          "op([0], '==', [1])",
          true,
        ],
      ],
    },
  ],
}
