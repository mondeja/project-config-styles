#!/usr/bin/env sh

REPOSITORY="$1"
VERSION="$2"
PROJECT_CONFIG_STYLES_TEMPDIR=
PREVIOUS_STYLES_VERSION=

cloneRepository() {
  dirname="$(basename "$REPOSITORY")"
  dirpath="$TEMPDIR/$dirname"
  if [ -d "$dirpath" ]; then
    rm -rf "$dirpath"
  fi
  gitFastClone "$REPOSITORY" "$dirpath" 2
}

copyProjectConfigStylesRepoToTempdir() {
  if [ -d "$PROJECT_CONFIG_STYLES_TEMPDIR" ]; then
    rm -rf "$PROJECT_CONFIG_STYLES_TEMPDIR"
  fi
  cp -r . "$PROJECT_CONFIG_STYLES_TEMPDIR"
}

stripProjectConfigMetaStylesOnTempdir() {
  # remove project-config meta styles from python/base.json5 style
  python_main_style_path="$PROJECT_CONFIG_STYLES_TEMPDIR/python/base.json5"
  python3 -c "import os,pyjson5

with open('$python_main_style_path') as f:
  o = pyjson5.load(f)
o['extends'] = list(filter(lambda s: os.path.basename(s) != 'project-config.json5', o['extends']))
with open('$python_main_style_path', 'wb') as f:
  pyjson5.dump(o, f)
"
}

prepareProjectConfigStylesRepo() {
  printf "Preparing project-config-styles repository...\n"
  copyProjectConfigStylesRepoToTempdir

  # if a tag is specified as the VERSION argument, checkout it
  prev_cwd="$(pwd)"
  cd "$PROJECT_CONFIG_STYLES_TEMPDIR"
  if [ -n "$VERSION" ]; then
    git fetch --all --tags > /dev/null
    git checkout -q "tags/$VERSION" -b "project-config-styles-$VERSION"
  fi
  printf '\n'
  cd "$prev_cwd"

  stripProjectConfigMetaStylesOnTempdir
}

# Rewrite project config style URIs in pyproject.toml to
# use the current styles. For example:
#
# gh://mondeja/project-config-styles@v2/python/base.json5 ->
# /tmp/project-config-styles/python/base.json5
#
rewriteProjectConfigStylesUrisInPyproject() {
  PREVIOUS_STYLES_VERSION="$(
    cat pyproject.toml \
    | grep 'gh://mondeja/project-config-styles' \
    | head -n 1 \
    | cut -d'@' -f2 \
    | cut -d'/' -f1)"
  escaped_project_config_styles_path="$(sedEscape "$TEMPDIR/project-config-styles")"
  sed -i -E \
    "s/gh:\/\/mondeja\/project-config-styles@v[0-9]{1,}/$escaped_project_config_styles_path/g" \
    pyproject.toml
}

revertProjectConfigStylesUrisInPyproject() {
  escaped_project_config_styles_path="$(sedEscape "$TEMPDIR/project-config-styles")"
  sed -i -E \
    "s/$escaped_project_config_styles_path/gh:\/\/mondeja\/project-config-styles@$PREVIOUS_STYLES_VERSION/g" \
    pyproject.toml
}

generatePreCommitConfig() {
  project_config_version="$(getProjectConfigVersion)"
  printf "repos:
  - repo: https://github.com/mondeja/project-config
    rev: %s
    hooks:
      - id: project-config-fix
" "$project_config_version" > "$PRE_COMMIT_FOR_PROJECT_CONFIG_FILE"
}

fixRepositoryUsingTheStyles() {
  prepareProjectConfigStylesRepo

  printf "Cloning %s's repository...\n" "$(basename "$REPOSITORY")"
  cloneRepository
  cd "$TEMPDIR/$dirname"

  rewriteProjectConfigStylesUrisInPyproject
  generatePreCommitConfig
  pre-commit install > /dev/null
  printf "Running pre-commit...\n"
  pre-commit run -c "$PRE_COMMIT_FOR_PROJECT_CONFIG_FILE" -a
  fix_exitcode=$?
  if [ $fix_exitcode -ne 0 ]; then
    revertProjectConfigStylesUrisInPyproject
    rm -f "$PRE_COMMIT_FOR_PROJECT_CONFIG_FILE"
    if [ -n "$VERSION" ]; then
      branch_name="project-config-fix-$VERSION"
      commit_message="Upgrade project-config styles to $VERSION"
    else
      branch_name="project-config-fix-master"
      commit_message="Update project-config styles"
    fi
    printf '\nPreparing pull request...\n'
    git checkout -q -b "$branch_name"
    git add .
    git commit -m "$commit_message" --no-verify
    printf "\n"
    PAGER= git diff HEAD^ HEAD
    printf "\n"
    PAGER= git log -n 1
    remote_origin_url="$(git config --get remote.origin.url)"
    printf "Pushing to %s...\n" "$remote_origin_url"
    git push -fu origin "$branch_name"
    default_branch_name="$(gitGetDefaultBranchName "$REPOSITORY")"
    gh pr create \
      --base "$default_branch_name" \
      --head "$branch_name" \
      --title "$commit_message" \
      --body "> This pull request was automatically generated by [project-config-styles](https://github.com/mondeja/project-config-styles)."
  fi
}

main() {
  . _scripts/utils
  PROJECT_CONFIG_STYLES_TEMPDIR="$TEMPDIR/project-config-styles"
  _prepareTempdir
  fixRepositoryUsingTheStyles
  exit "$(getExitcode)"
}

main
